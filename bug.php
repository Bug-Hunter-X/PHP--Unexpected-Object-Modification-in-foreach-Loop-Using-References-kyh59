In PHP, a common yet subtle error arises when dealing with references and objects, especially within loops or recursive functions.  Consider this scenario:  ```php class MyClass { public $value = 0; public function increment() { $this->value++; } } $objects = []; for ($i = 0; $i < 3; $i++) { $objects[] = new MyClass(); } foreach ($objects as &$object) { $object->increment(); } //Expected output: Each object's value should be 1. foreach ($objects as $object) { echo "Object value: ".$object->value.\n"; } ``` This code *appears* correct. However, the `&` in `foreach ($objects as &$object)` creates a reference. Modifications within the loop affect the original array element.  After the loop, every object in `$objects` references the *same* object, resulting in all having the final value instead of independent values. 